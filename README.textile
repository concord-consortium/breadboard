h1. Building SPARKS and setting up local environment

h2. Building Javascript code

Sparks uses Sprockets (http://getsprockets.org) to manage the javascript code.  Sprockets combines the individual JS files into a single file per activity. To avoid duplication, these files aren't managed by git.

To build the combined JS files:

 // install sprockets if necessary
 gem install sprockets
 
 // build using sprockets, from top folder
 rake
 
"rake" will need to be called each time a Javascript file is changed.

h2. Setting up QUCS proxy

SPARKS will try to access the QUCS application (used for circuit solving)  at the url 
 
 /sparks/qucsator/solve
 
You can proxy this URL to the QUCS application running on otto, by setting up Apache to proxy

 /sparks/
 
to
 
 http://sparks.portal.concord.org/sparks/
 
The simplest way to do this is to modify the file proxy/apache.conf.sample with your information, and run it with

 apachectl -f "`pwd`/proxy/apache.conf" -k start
 
Alternatively, you can install QUCS from http://qucs.sourceforge.net/, update the PHP file lib/qucsator/solve/index.php to point to your local install of QUCS if it is not in /usr/local/bin/, place the file somewhere where it can be served by PHP, such as ~/Sites/qucsator/solve, and modify the proxy file accordingly

h2. Launch the application

Go to http://localhost:1234/ (or whatever port you set in the step above) in your browser to get open the main index file, or directly open any html file to go directly to an activity.


h1. Running the tests

This application is mostly tested using JSPEC. You can install JSPEC with

 gem install jspec
 
To run the tests on the command line with Rhino:

 cd tests/jspec
 java -jar spec/support/js.jar -opt -1 spec/rhino-terminal.js

Note that some of the tests, 'Measuring breadboard components with QUCS' and 'Using multimeter with mock Flash connection' require a response from the QUCS applications. The rest should run fine as long as the code has been built (section 1 above).

h1. Deployment

This whole sparks folder should be embedded into the sparks branch of the
rigse portal.

So either manually or with capistrano tasks, rigse should be first cloned 
from http://github.com/stepheneb/rigse/tree/sparks.

Then clone sparks under the "public" folder and rename the "spark" folder to
"sparks-content".

from rigse/
  cap sparks-production import:create_or_update_sparks_content
  
This will put the content in seyomour:/web/production/sparks/current/public/sparks-content

h1. Activities

h3. Measuring Resistance

Main: activities/measuring-resistance/index.html

h3. Module 2 - Measuring Series


<hr/>
<hr/>
<hr/>

h1. Notes from SPARKS initial meeting with Seong, Sam and Jonah

h1. Qucs Server

The PHP server is at otto:/web/otto.concord.org/qucs/index.php, which invokes
the qucs command line at ~skim/local/app/qucs-0.0.15/bin.

To download qucs: http://qucs.sourceforge.net/

<hr />

h1. JSpec Testing


h3. Running the specs

You should run spec from the "top" directory. For example,

bc. cd sparks-content/tests/jspec
jspec run --browsers firefox

h5. Running it with rhino in terminal

Because of the jspec bug in optimization you can't do "jspec run --rhino ...".

bc. java -jar spec/support/js.jar -opt -1 spec/rhino-terminal.js

h5. Running it in browsers

bc. jspec run --browsers ff

@spec/spec.dom.html@ is the default html that is opened by the browsers.

h5. Running with a server

bc. jspec run --browsers ff --server

@spec/server.rb@ defines the routes.
@spec/spec.server.html@ is the default html processed by the server.

h3. Links

JSpec home: "http://visionmedia.github.com/jspec/":http://visionmedia.github.com/jspec/

<hr/>

h1. Notes

h2. Check list for importing Kathy's work on Flash

h3. Flash Publish Settings for the main FLA file

# Go to File -> Publish Settings -> Flash
# Set Script to ActionScript 3.0 and click Settings.
# Add the following to Source path:
** ./actionscript
** ../../common/actionscript
 
h3. Actions for the main FLA

Open Actions of the frame #1 of the "actions" laye and make sure the script instantiates the activity. 
e.g. 
 <code>
 import org.concord.sparks.Activity;
 import org.concord.sparks.activities.ResistorColors;
 
 var topDir = '/sparks-content'; //for rails
 //var topDir = '../..'; //for standalone testing
 
 var activity:Activity = new ResistorColors('Resistor Colors', root, topDir);
 </code>


h1. SPARKS Info
===============

Copied from Google Doc 9/21/10:


sparks.portal.concord.org
Teacher: edison3/password

h3. git repos


Main SPARKS content: http://github.com/concord-consortium/sparks

To deploy new Flash/SPARKS code:
bc. cap sparks-production import:create_or_update_sparks_content

Portal code is in: sparks branch of http://github.com/stepheneb/rigse

to deploy Rails server:
bc. cap spark-production deploy


SPARKS checkout from git should go in rigse/public/sparks-content (if using rails)

Folder structure:
** sparks-content/common: 	common javascript/actionscript code
** sparks-content/activities: 	activity-specific code (Note that first activity is better organized/refactored)
** sparks-content/lib: 		third-party code,such as jQuery

h3. Flash:


Note to set classpath information in activity 
Publish Settings -> Flash -> ActionScript
Classpath should be
** .
** ./as
** ../../../common/actionscript

h3. Javascript

If you make changes to javascript, you have to run
bc. rake
in the top-level directory, which will generate the all the client-[...].js files in the top-level directory
This uses sprocket

h4. Flash/Javascript connection


javascript/flash_comm.js
bc. sparks.flash.sendCommand
common/actionscript/org/concord/sparks/JavaScript.as
bc. call
bc. sendEvent

e.g. call JavaScript.instance().sendEvent(....)


h3. Tests

To run tests: look in main readme file. Only jSpec tests exist (only for JavaScript)

Note: good way to run activities: ../measuring-resistance/index.html?debug=true&n=5&r=100&m=102&t=0.01
(n: humber of bands
r: resistance
m: actual resistance
t: tolerance)

h3. QUCS server

@otto: /web/otto.concord.org/qucs

To run locally, use proxy: [...]

or, if you build qucs locally, modify file  /javascript/circuit/qucsator.js (ajax call, line 26) to point to your own server

h3. Reports

When updating rubrics, just update locally, then go to /rubrics in Rails portal and edit/replace by hand
 
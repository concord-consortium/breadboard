//sparks.flash.sendCommand('insert_component', 'slider', "woo", "e30,e22", "C10");package {    import flash.display.Loader;    import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Shape;	import flash.display.Graphics;    import flash.display.Sprite;	import fl.motion.*;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.geom.ColorTransform;	import flash.geom.Rectangle;//kpc    import flash.geom.Matrix;//kpc	import flash.geom.Point;	import flash.display.CapsStyle; //KPC    import flash.net.URLRequest;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.media.SoundTransform;	import flash.events.KeyboardEvent;	import flash.text.*;	import Lead;    import org.concord.sparks.JavaScript;    import Globe;        public class ComponentSlider extends ComponentObj {                      private var graphicsLayer:MovieClip;		private var sliderKnob:MovieClip;		private var sliderRunner:MovieClip;		private var leftEnd:MovieClip;		private var rightEnd:MovieClip;		private var lead1:Lead;		private var lead2:Lead;		private var lead:Lead; //KPC for drawleads registration point		private var lead1ConnectPointX:Number;  //KPC		private var lead2ConnectPointX:Number;  //KPC		private var lead1ConnectPointY:Number;  //KPC		private var lead2ConnectPointY:Number;  //KPC				var angle:Number;  		var leadOffset_x:Number;		var leadOffset_y:Number;						private var _leadColor1:uint; //KPC copy from wire		private var _leadColor2:uint;  //KPC copy from wire		private var connectLeads:Shape = new Shape(); //KPC				private var _x1:Number;		private var _y1:Number;		private var _x2:Number;		private var _y2:Number;		private var _angle:Number;				private var _lead_x1:Number;		private var _lead_y1:Number;		private var _lead_x2:Number;		private var _lead_y2:Number;		private var _leadTilt:Number = 60 * Math.PI/180;  //extra rotation for cap/reductor leads in radions 				private var _leadLength:Number;				private var xOffset:Number;		private var yOffset:Number;				private var bandZoom:Boolean = true;		private var embedVerdana:Font = new Font1();		private var embedArialBlack:Font = new Font2();				private var printColor:TextField = new TextField();		private var labelTextField = new TextField();		private var format:TextFormat = new TextFormat();		private var formatLabel:TextFormat = new TextFormat();				private const textTrim:Number = 8;						//private var reset_enable_component_dragging:Boolean = Globe.enable_component_dragging;        		        public function ComponentSlider() {            			super();			            graphicsLayer = MovieClip(this.getChildByName('slider_mc'));			sliderKnob = MovieClip(this.graphicsLayer.getChildByName('knob'));			sliderRunner = MovieClip(this.graphicsLayer.getChildByName('runner'));			leftEnd = MovieClip(this.graphicsLayer.getChildByName('end_left'));			rightEnd = MovieClip(this.graphicsLayer.getChildByName('end_right'));			_leadLength = 45; //5//length of exposed metal ends of wire in pixels			            //get leads and position leads			this.putLeadsOnBottom();            lead1 = this.getEnds()[0];            lead2 = this.getEnds()[1]; 			this.graphicsLayer.getChildByName('label_mc').visible=false;						this.removeEventListener(MouseEvent.MOUSE_DOWN, beginDrag);					   //Beginning of KPC Code for moving Ends and readjusting wire			this.addChild(connectLeads);			swapChildren(connectLeads, graphicsLayer);						this.addEventListener(Event.ENTER_FRAME, slideKnob);						//this.sliderKnob.addEventListener(MouseEvent.MOUSE_DOWN, dragKnob);			//this.addEventListener(MouseEvent.MOUSE_DOWN, turnOffDragging);			//this.addEventListener(MouseEvent.MOUSE_UP, resetDragging);            		}				public function dimensionSlider(x1:Number,y1:Number,x2:Number,y2:Number):void {									if(x1<=x2) {				_x1 = x1;				_y1 = y1;				_x2 = x2;				_y2 = y2;			} else {				_x1 = x2;				_y1 = y2;				_x2 = x1;				_y2 = y1;			}						var angle:Number = Math.atan( (_y2-_y1) / (_x2-_x1) );  // angle of the line's slope in radians			_angle = angle;			var leadOffset_x:Number = _leadLength * Math.cos(angle);			var leadOffset_y:Number = _leadLength * Math.sin(angle);									_lead_x1 = _x1 + leadOffset_x;			_lead_y1 = _y1 + leadOffset_y;			_lead_x2 = _x2 - leadOffset_x;			_lead_y2 = _y2 - leadOffset_y;								 			positionLeads(lead1, _x1, _y1, _angle);            positionLeads(lead2, _x2, _y2, _angle);			drawLeads();		}				public function drawLeads():void  {						_leadColor1 = 0xA0A0A0; // the lead's outer color - the lead is two-toned			_leadColor2 = 0xE5E5E5;														lead1ConnectPointY = lead1.y - 40;			lead2ConnectPointY = lead2.y + 40;						connectLeads.graphics.clear();			connectLeads.alpha = 0;			lead1.alpha = 0;			lead2.alpha = 0;						connectLeads.graphics.lineStyle(8.5, 0x565656, 1.0,false, "normal", CapsStyle.NONE, null, 0);			//connectLeads.graphics.beginFill(0x00FF00);			connectLeads.graphics.moveTo(_lead_x1, _lead_y1); 			connectLeads.graphics.lineTo(_lead_x2, _lead_y2);										connectLeads.graphics.lineStyle(5, _leadColor1, 1.0,false, "normal", CapsStyle.NONE, null, 0);			//connectLeads.graphics.beginFill(0x00FF00);			connectLeads.graphics.moveTo(_lead_x1, _lead_y1);  			connectLeads.graphics.lineTo(_lead_x2, _lead_y2);							connectLeads.graphics.lineStyle(2, _leadColor2, 1);			connectLeads.graphics.moveTo(_lead_x1, _lead_y1); 			connectLeads.graphics.lineTo(_lead_x2, _lead_y2);												//center the main resistor between the leads KPC 						graphicsLayer.x =  (lead1.x + lead2.x) /2 ;			graphicsLayer.y = (lead1.y + lead2.y)/2 ;			graphicsLayer.rotation += _angle*180/Math.PI; 							}						public function setLabel(labelStr:String){			if(labelStr != ''){				trace('resistorLabel is: '+labelStr);				var label_mc:MovieClip = MovieClip(this.graphicsLayer.getChildByName('label_mc'));				var threeDigitTextWidth:int = 35;				formatLabel.font = embedArialBlack.fontName;				formatLabel.color = 0xffffff;				formatLabel.size = 14;				formatLabel.bold = false;											label_mc.labelTextField = new TextField();				label_mc.labelTextField.defaultTextFormat = formatLabel;				label_mc.labelTextField.selectable = false; 				label_mc.labelTextField.embedFonts = true;				label_mc.labelTextField.antiAliasType = AntiAliasType.ADVANCED;				label_mc.labelTextField.x = 0;				label_mc.labelTextField.y = 2;				label_mc.labelTextField.text = labelStr;				label_mc.labelTextField.width = label_mc.labelTextField.textWidth+5;				label_mc.labelTextField.height = label_mc.labelTextField.textHeight+2;					//label_mc.labelTextField.embedFonts = true;				label_mc.addChild(label_mc.labelTextField);				//mock centering of label text				if ( label_mc.labelTextField.textWidth < threeDigitTextWidth ) {					label_mc.x +=5;				}				trace("text width="+label_mc.labelTextField.textWidth);							this.addEventListener(MouseEvent.MOUSE_OVER, labelOn);				this.addEventListener(MouseEvent.MOUSE_OUT, labelOff);			}		}						private function slideKnob( e:Event ):void {			if(this.sliderKnob.hitTestObject(this.sliderRunner))			{			this.sliderKnob.addEventListener(MouseEvent.MOUSE_DOWN, dragKnob);			 }			else 			{				stage.removeEventListener(MouseEvent.MOUSE_MOVE,moveKnobMC);								if(this.sliderKnob.hitTestObject(this.rightEnd))					{						this.sliderKnob.x = (rightEnd.x- 5);						this.sliderKnob.alpha=1;					}				else {					this.sliderKnob.x = (leftEnd.x + 1);					this.sliderKnob.alpha=1;				}			}					}				private function dragKnob(e:MouseEvent):void {			this.sliderKnob.alpha=.85;						var bb:Point = parent.globalToLocal(new Point(e.stageX, e.stageY));				xOffset = bb.x - this.sliderKnob.x;				yOffset = bb.y - this.sliderKnob.y;								stage.addEventListener(MouseEvent.MOUSE_MOVE,moveKnobMC);			stage.addEventListener(MouseEvent.MOUSE_UP, stopDragKnob);		}				private function stopDragKnob(event:MouseEvent):void {			this.sliderKnob.alpha=1;						stage.removeEventListener(MouseEvent.MOUSE_MOVE,moveKnobMC);			stage.removeEventListener(MouseEvent.MOUSE_UP,stopDragKnob);		}				private function moveKnobMC(e:MouseEvent):void {										var bb:Point = parent.globalToLocal(new Point(e.stageX, e.stageY));			this.sliderKnob.x = bb.x - xOffset;			//this.sliderKnob.y = bb.y - yOffset;						e.updateAfterEvent();						}		/*			private function turnOffDragging(e:MouseEvent) {						Globe.enable_component_dragging = false;		}				private function resetDragging(e:MouseEvent) {						Globe.enable_component_dragging = reset_enable_component_dragging;		}*/						private function labelOn(event:MouseEvent):void {			this.graphicsLayer.getChildByName('label_mc').visible=true;			//this.graphicsLayer.getChildByName('labelBackground_mc').visible=false;		}		private function labelOff(event:MouseEvent):void {			this.graphicsLayer.getChildByName('label_mc').visible=false;			//this.graphicsLayer.getChildByName('labelBackground_mc').visible=false;		}  		    }}			
drawWire();function drawWire():void	{	colorWire.graphics.clear();	colorWire.graphics.lineStyle(12, wireCol, 1);		//subtract the x and y scale values of the colorWireHolder to make the wire line up with ends	colorWire.graphics.moveTo( (side1.x - colorWireHolder.x), (side1.y - colorWireHolder.y) ); 	//colorWire.graphics.lineTo( (side2.x - colorWireHolder.x), (side2.y - colorWireHolder.y ));	colorWire.graphics.curveTo( (side2.x - colorWireHolder.x - curveFactor), (side2.y - colorWireHolder.y - curveFactor), (side2.x - colorWireHolder.x), (side2.y - colorWireHolder.y ) );	colorWire.graphics.endFill(); //	trace("wire.side1.x = " + wire.side1.x + " wire.side1.y = " + wire.side1.y);//	trace("wire.colorWireHolder.x = " + wire.colorWireHolder.x + "wire.colorWireHolder.y = " + wire.colorWireHolder.y);	}//setInterval(drawWire, 25);side1.buttonMode = true;side1.addEventListener(MouseEvent.MOUSE_DOWN, side1StartDragging);side1.addEventListener(MouseEvent.MOUSE_UP, side1StopDragging);side2.buttonMode = true;side2.addEventListener(MouseEvent.MOUSE_DOWN, side2StartDragging);side2.addEventListener(MouseEvent.MOUSE_UP, side2StopDragging);function side1StartDragging(event:MouseEvent) {	side1.startDrag();}function side1StopDragging(event:MouseEvent) {	side1.stopDrag();}function side2StartDragging(event:MouseEvent) {	side2.startDrag();}function side2StopDragging(event:MouseEvent) {	side2.stopDrag();}/*colorWireHolder.buttonMode = true;colorWireHolder.addEventListener(MouseEvent.MOUSE_DOWN, startDragging);colorWireHolder.addEventListener(MouseEvent.MOUSE_UP, stopDragging); function startDragging(event:MouseEvent) {	startDrag();} function stopDragging(event:MouseEvent) {	stopDrag();}*///////////////////////var currentHoleOne:MovieClip;var currentHoleTwo:MovieClip;var currentPosHoleOne:MovieClip;var currentPosHoleTwo:MovieClip;var currentNegHoleOne:MovieClip;var currentNegHoleTwo:MovieClip;var wireOneLocation:String;var wireTwoLocation:String;var powerRows:Array = new Array(); var posRows:Array = new Array();var negRows:Array = new Array();var wireOnePowerLocation:String;var wireTwoPowerLocation:String;var colorWireOneOnPositivePower:Boolean = false;var colorWireTwoOnPositivePower:Boolean = false;var colorWireOneOnNegativePower:Boolean = false;var colorWireTwoOnNegativePower:Boolean = false;var wireSideOne:String = null;var wireSideTwo:String = null;var wireName:String;////////////////function wireOnBoard():void{	wireTipTwoX = side2.x + this.x;	wireTipTwoY = side2.y + this.y;		if (currentHoleOne != null )	{		currentHoleOne.alpha = 1;		currentHoleOne = null;		wireOneLocation = "empty";	}		if (currentHoleTwo != null )	{		currentHoleTwo.alpha = 1;		currentHoleTwo = null;		wireTwoLocation = "empty";	}			//for every row ...	for(var rowNum:int = 1; rowNum<=10; rowNum++)	{		//start at left of grid		//accessin the list of row by index		var row:Array = MovieClip(parent).rows[rowNum]; 						//for every hole in the row...		for (var holeNum:int = 1; holeNum <=30; holeNum++)		{			var wh:MovieClip = row[holeNum];			//trace("h.x = " + h.x + " " + "h.y = " + h.y);			var boardRow:String;								switch(rowNum)			{				case 1:					boardRow="a";					break;				case 2:					boardRow="b";					break;				case 3:					boardRow="c";					break;				case 4:					boardRow="d";					break;				case 5:					boardRow="e";					break;				case 6:					boardRow="f";					break;				case 7:					boardRow="g";					break;				case 8:					boardRow="h";					break;				case 9:					boardRow="i";					break;				case 10:					boardRow="j";					break;			}												if (  (wireTipOneX > wh.x) &&  (wireTipOneX < wh.x + 12)  &&  (wireTipOneY > wh.y) &&  (wireTipOneY < wh.y + 12) )			{				currentHoleOne = wh;				wh.alpha=.5;				wireOneLocation = boardRow+holeNum;				//trace(this.name + " Row = " + boardRow + " Column = " + holeNum + " Left Side On");			}								else if (  (wireTipTwoX > wh.x) &&  (wireTipTwoX < wh.x + 12)  &&  (wireTipTwoY > wh.y) &&  (wireTipTwoY < wh.y + 12) )			{				currentHoleTwo = wh;				wh.alpha=.5;				wireTwoLocation = boardRow+holeNum;								//trace(this.name + " Row = " + boardRow + " Column = " + holeNum + " Left Side On");			}		}	}		//wireName = ExternalInterface.call('breadModel', 'insert', 'wire', wireSideOne + ',' + wireSideTwo);}/*function colWireOnPositive():void{	var wire_armature:IKArmature = IKManager.getArmatureByName('Armature_' + wireArmatureNumber);	var wire_bone:IKBone = wire_armature.getBoneByName('ikBoneName' + wireikBoneName);	var wire_boneTip:Point = wire_bone.tailJoint.position;	if (currentPosHoleOne != null )	{		currentPosHoleOne.alpha = 1;		currentPosHoleOne = null;	}		if (currentPosHoleTwo != null )	{		currentPosHoleTwo.alpha = 1;		currentPosHoleTwo = null;	}		//for every row ...	for(var rowNum:int = 1; rowNum<=2; rowNum++)	{		//start at left of grid		//accessin the list of row by index		var posRow:Array = MovieClip(parent).posRows[rowNum]; 				//for every hole in the row...		for (var holeNum:int = 1; holeNum <=25; holeNum++)		{			var wph:MovieClip = posRow[holeNum];			//trace("h.x = " + h.x + " " + "h.y = " + h.y);									if (  (wireTipOneX > wph.x) &&  (wireTipOneX < wph.x + 12)  &&  (wireTipOneY > wph.y) &&  (wireTipOneY < wph.y + 12) )			{				currentPosHoleOne = wph;				wph.alpha = .5;				wireOnePowerLocation = posRow+holeNum;				colorWireOneOnPositivePower = true;			}						   if (  (wireTipTwoX > wph.x) &&  (wireTipTwoX < wph.x + 12)  &&  (wireTipTwoY > wph.y) &&  (wireTipTwoY < wph.y + 12) )			{				currentPosHoleTwo = wph;				wph.alpha = .5;				wireTwoPowerLocation = posRow+holeNum;				colorWireTwoOnPositivePower = true;			}						if (currentPosHoleOne == null)			{				colorWireOneOnPositivePower = false;			}						if (currentPosHoleTwo == null)			{				colorWireTwoOnPositivePower = false;			}		}	}}function colWireOnNegative():void{	var wire_armature:IKArmature = IKManager.getArmatureByName('Armature_' + wireArmatureNumber);	var wire_bone:IKBone = wire_armature.getBoneByName('ikBoneName' + wireikBoneName);	var wire_boneTip:Point = wire_bone.tailJoint.position;	if (currentNegHoleOne != null )	{		currentNegHoleOne.alpha = 1;		currentNegHoleOne = null;	}		if (currentNegHoleTwo != null )	{		currentNegHoleTwo.alpha = 1;		currentNegHoleTwo = null;	}		//for every row ...	for(var rowNum:int = 1; rowNum<=2; rowNum++)	{		//start at left of grid		//accessin the list of row by index		var negRow:Array = MovieClip(parent).negRows[rowNum]; 				//for every hole in the row...		for (var holeNum:int = 1; holeNum <=25; holeNum++)		{			var wnh:MovieClip = negRow[holeNum];			//trace("h.x = " + h.x + " " + "h.y = " + h.y);									if (  (wireTipOneX > wnh.x) &&  (wireTipOneX < wnh.x + 12)  &&  (wireTipOneY > wnh.y) &&  (wireTipOneY < wnh.y + 12) )			{				currentNegHoleOne = wnh;				wnh.alpha = .5;				wireOnePowerLocation = negRow+holeNum;				colorWireOneOnNegativePower = true;			}						   if (  (wireTipTwoX > wnh.x) &&  (wireTipTwoX < wnh.x + 12)  &&  (wireTipTwoY > wnh.y) &&  (wireTipTwoY < wnh.y + 12) )			{				currentNegHoleTwo = wnh;				wnh.alpha = .5;				wireTwoPowerLocation = negRow+holeNum;				colorWireTwoOnNegativePower = true;			}						if (currentNegHoleOne == null)			{				colorWireOneOnNegativePower = false;			}						if (currentNegHoleTwo == null)			{				colorWireTwoOnNegativePower = false;			}		}	}}function setWireEndValues():void{		if (wireOneLocation != null && wireOneLocation != "empty" )	{		wireSideOne = wireOneLocation;	}		else if ( colorWireOneOnPositivePower == true )	{		wireSideOne = "left_positive_1";	}		else if ( colorWireOneOnNegativePower == true )	{		wireSideOne = "left_negative_1";	}//	//	else//	{//		wireLeftSide = null;//	}		if (wireTwoLocation != null && wireTwoLocation != "empty" )	{		wireSideTwo = wireTwoLocation;	}		else if ( colorWireTwoOnPositivePower == true )	{		wireSideTwo = "left_positive_1";	}		else if ( colorWireTwoOnNegativePower == true )	{		wireSideTwo = "left_negative_1";	}}function onWireMove(event:MouseEvent):void{	var newWireTipOneX:Number = this.x;	var newWireTipOneY:Number = this.y;	var newWireTipTwoX:Number;	var newWireTipTwoY:Number;						if ((newWireTipOneX != wireTipOneX) || (newWireTipOneY != wireTipOneY) )	{		wireTipOneX = newWireTipOneX;		wireTipOneY = newWireTipOneY;		wireTipTwoX = newWireTipTwoX;		wireTipTwoY = newWireTipTwoY;		this.wireOnBoard();		this.colWireOnPositive();		this.colWireOnNegative();		this.setWireEndValues();		// Move a component to new holes		//ExternalInterface.call('breadModel', 'move', myWire01, 'wireSideOne,wireSideTwo');		//trace ( ExternalInterface.call('breadModel', 'move', myWire01, 'wireSideOne,wireSideTwo') );	}//	trace (this.name + " Side One = "  + wireOneLocation );//	trace (this.name + " Side Two = " + wireTwoLocation );//	trace (this.name + " Side One on Power = " + colorWireOneOnPositivePower);//	trace (this.name + " Side Two on Power = " + colorWireTwoOnPositivePower);//	trace (this.name + " Side One on Neg Power = " + colorWireOneOnNegativePower);//	trace (this.name + " Side Two on Neg Power = " + colorWireTwoOnNegativePower);	trace (this.name + " wireSideOne = " + wireSideOne);	trace (this.name + " wireSideTwo = " + wireSideTwo);}*/
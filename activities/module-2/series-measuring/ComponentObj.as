package{    import flash.display.Loader;    import flash.display.MovieClip;	import flash.display.DisplayObject;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.geom.ColorTransform;    import flash.net.URLRequest;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.media.SoundTransform;
    
	import flash.text.TextField;    import flash.text.TextFormat;    import flash.text.TextFieldAutoSize;		import Lead;    import org.concord.sparks.JavaScript;    import Globe;		public class ComponentObj extends MovieClip{				private var _breadboard:MovieClip;
		private var _lead1:Lead_mc;		private var _lead2:Lead_mc;
		private var _componentName:String;
		
		        //////////public variables for breadboard probeQuery_handler        public var blackProbeOnRight:Boolean = false;        public var redProbeOnRight:Boolean = false;        public var blackProbeOnLeft:Boolean = false;        public var redProbeOnLeft:Boolean = false;                private var sndClickIt:clickit3;        private var sndClickItChannel:SoundChannel;        private var transform1:SoundTransform=new SoundTransform();                private var resistorTipLeftX:Number;        private var resistorTipLeftY:Number;        private var resistorTipRightX:Number;        private var resistorTipRightY:Number;                private var currentHoleOne:MovieClip = null;        private var currentHoleTwo:MovieClip = null;                private var resistorLeftLocation:String;        private var resistorRightLocation:String;                //variables to hold value of resistorLeft and RightLocations for probe functions        //private var resistorLeftCoordinates:String;        //private var resistorRightCoordinates:String;                private var localProbeBlackLeftLocation:String = null;        private var localProbeBlackRightLocation:String = null;        private var localProbeRedLeftLocation:String = null;        private var localProbeRedRightLocation:String = null;            //KPC variables to adjust color for probe engaged and rollovers        private var rolloverColor:ColorTransform = new ColorTransform();        private var engagedColor:ColorTransform = new ColorTransform();        private var originalColor:ColorTransform = new ColorTransform();			public function ComponentObj() {			trace('ENTER ComponentObj');			super();
			
			_lead1 = new Lead_mc();			this.addChild(_lead1);						_lead2 = new Lead_mc();
			this.addChild(_lead2);
			
			//default position (fits resistors)
			_lead1.x = 0;			_lead1.y = 0;			_lead2.x = 175;			_lead2.y = 0;			_lead2.scaleX = -1;						_lead1.setComponentObj(this);			_lead1.setComponentName(this.name);						_lead2.setComponentObj(this);			_lead2.setComponentName(this.name);			//_breadboard = breadboard;			//_breadboard.getComponentLayer().addChild(this);
			
			this.addEventListener(Event.ADDED_TO_STAGE, added_to_stage_handler);            this.addEventListener(Event.REMOVED_FROM_STAGE, removed_from_stage_handler);            this.addEventListener(Event.ENTER_FRAME, resistorLocationInitialValues)                    if (stage != null) {                stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);                stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);            }		}		
		
		public function setLeadCoordinates(lead:Lead, x:Number, y:Number):void {
			lead.x = x;
			lead.y = y;
		}
		
		public function getEnds():Array {            return [_lead1, _lead2];        }
        
       	public function disconnect(lead:Lead):void {			JavaScript.instance().sendEvent('disconnect', 'component', this.name, lead.getLocation());
            trace('lead.getLocation'+lead.getLocation());        }		public function connect(lead:Lead):void {			JavaScript.instance().sendEvent('connect', 'component', this.name, lead.getLocation());		}
		
		private function mouseUpHandler(mevt:MouseEvent):void        {            onResistorMove_handler(mevt);        }                private function mouseMoveHandler(mevt:MouseEvent):void {        }                private function added_to_stage_handler(evt:Event):void        {            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);        }                private function removed_from_stage_handler(evt:Event):void        {            stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);        }                private function resistorLocationInitialValues(event:Event):void        {			//trace('ENTER ComponentResistor#ResistorLocationInitailValues');            resistorTipLeftX = this.x + (_lead1.getLeadMovieClip().parent.x);            resistorTipLeftY = this.y + _lead1.getLeadMovieClip().parent.y;            resistorTipRightX = this.x + (_lead2.getLeadMovieClip().parent.x);            resistorTipRightY = this.y + _lead2.getLeadMovieClip().parent.y;            resistorOnBoard();            //  replace 'color string' with the actual values of the resistors in ohms.            //componentName = ExternalInterface.call('breadModel', 'insert', 'resistor', resistorLeftLocation + ',' + resistorRightLocation, bandOneColor + ',' + bandTwoColor + ',' + bandThreeColor + ',' + bandFourColor);            removeEventListener(Event.ENTER_FRAME, resistorLocationInitialValues);        }
        
        
        
      	public function resistorOnBoard():void {            trace('ENTER ComponentResistor#resistorOnBoard');                        if (currentHoleOne !== null) {                currentHoleOne.gotoAndStop(1);                currentHoleOne = null;            }                        if (currentHoleTwo !== null ) {                currentHoleTwo.gotoAndStop(1);                currentHoleTwo = null;            }                        //for every row ...            if (parent.parent != null && MovieClip(parent.parent).rows != null) {            	//trace('for every row');                var boardRow:String;                var h:MovieClip;                            for (var rowNum:int = 1; rowNum <= 10; rowNum++) {                	//trace('rows '+rowNum);                    //start at left of grid                    //accessing the list of row by index                    var row:Array = MovieClip(parent.parent).rows[rowNum];                                         //for every hole in the row...                    for (var holeNum:int = 1; holeNum <= 30; holeNum++) {                    	//trace('holes '+holeNum);                        h = row[holeNum];                        //trace("h.x = " + h.x + " " + "h.y = " + h.y);                        boardRow = String.fromCharCode("a".charCodeAt(0) + rowNum - 1);                                                if (resistorTipLeftX > h.x &&  resistorTipLeftX < h.x + 12  &&  resistorTipLeftY > h.y &&  resistorTipLeftY < h.y + 12) {                            currentHoleOne = h;                            h.gotoAndStop(2);                            resistorLeftLocation = boardRow + holeNum;                            trace (this.name + " " + resistorLeftLocation + " Left On" );							_lead1.setLocation(resistorLeftLocation); //jonah		                            //trace("resistorTipLeftY = " + resistorTipLeftY + " h.y = " + h.y);                            //trace(this.name + " Row = " + boardRow + " Column = " + holeNum + " Left Side On");                        }                        else if (  (resistorTipRightX > h.x) &&  (resistorTipRightX < h.x + 12)  &&  (resistorTipRightY > h.y) &&  (resistorTipRightY < h.y + 12) ) {                            currentHoleTwo = h;                            h.gotoAndStop(2);                            resistorRightLocation = boardRow+holeNum;                            trace (this.name + " " + resistorRightLocation + " Right On" );							_lead2.setLocation(resistorRightLocation); //jonah                            //trace(this.name + " Row = " + boardRow + " Column = " + holeNum + " Left Side On");                        }                                            if (resistorLeftLocation != "empty") {                            //resistorLeftCoordinates = resistorLeftLocation;                        }                                                if (resistorRightLocation != "empty") {                            //resistorRightCoordinates = resistorRightLocation;                        }                    }                }            }        }                private function onResistorMove_handler(event:MouseEvent):void        {            var newResistorTipLeftX:Number = this.x + (_lead1.getLeadMovieClip().x);            var newResistorTipLeftY:Number = this.y + _lead1.getLeadMovieClip().y;            var newResistorTipRightX:Number = this.x + (_lead2.getLeadMovieClip().x);            var newResistorTipRightY:Number = this.y +_lead2.getLeadMovieClip().y;                          if ((newResistorTipLeftX != resistorTipLeftX) || (newResistorTipLeftY != resistorTipLeftY) )            {                resistorTipLeftX = newResistorTipLeftX;                resistorTipLeftY = newResistorTipLeftY;                resistorTipRightX = newResistorTipRightX;                resistorTipRightY = newResistorTipRightY;                this.resistorOnBoard();            }                        else if ((newResistorTipRightX != resistorTipRightX) || (newResistorTipRightY != resistorTipRightY) )            {                resistorTipLeftX = newResistorTipLeftX;                resistorTipLeftY = newResistorTipLeftY;                resistorTipRightX = newResistorTipRightX;                resistorTipRightY = newResistorTipRightY;                this.resistorOnBoard();            }        }
        
			}}
package {    import flash.display.Loader;    import flash.display.MovieClip;	import flash.display.DisplayObject;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.MouseEvent;    import flash.geom.ColorTransform;    import flash.net.URLRequest;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.media.SoundTransform;		import flash.text.TextField;    import flash.text.TextFormat;    import flash.text.TextFieldAutoSize;		import Lead;    import org.concord.sparks.JavaScript;    import Globe;        // Resistor 4 band    public class ComponentResistor extends ComponentObj {        		private var lead1:Lead_mc;		private var lead2:Lead_mc;                private var m_bandCount:int;        private var m_resistanceValue:Number = NaN;        private var m_pngBandSuffix:String;                private var bandOneColor:String = "blue";        private var bandTwoColor:String = "blue";        private var bandThreeColor:String = "blue";        private var bandFourColor:String = "blue";        private var bandToleranceColor:String = "blue";				private var colors:Array = null;                private var componentName:String;		        //////////public variables for breadboard probeQuery_handler        public var blackProbeOnRight:Boolean = false;        public var redProbeOnRight:Boolean = false;        public var blackProbeOnLeft:Boolean = false;        public var redProbeOnLeft:Boolean = false;                private var sndClickIt:clickit3;        private var sndClickItChannel:SoundChannel;        private var transform1:SoundTransform=new SoundTransform();                private var resistorTipLeftX:Number;        private var resistorTipLeftY:Number;        private var resistorTipRightX:Number;        private var resistorTipRightY:Number;                private var currentHoleOne:MovieClip = null;        private var currentHoleTwo:MovieClip = null;                private var resistorLeftLocation:String;        private var resistorRightLocation:String;                //variables to hold value of resistorLeft and RightLocations for probe functions        //private var resistorLeftCoordinates:String;        //private var resistorRightCoordinates:String;                private var localProbeBlackLeftLocation:String = null;        private var localProbeBlackRightLocation:String = null;        private var localProbeRedLeftLocation:String = null;        private var localProbeRedRightLocation:String = null;            //KPC variables to adjust color for probe engaged and rollovers        private var rolloverColor:ColorTransform = new ColorTransform();        private var engagedColor:ColorTransform = new ColorTransform();        private var originalColor:ColorTransform = new ColorTransform();            private var m_bandOneLoader:Loader = null;        private var m_bandTwoLoader:Loader = null;        private var m_bandThreeLoader:Loader = null;        private var m_bandFourLoader:Loader = null;        private var m_bandToleranceLoader:Loader = null;				private var bandZoom:Boolean = true;		private var printColor:TextField = new TextField();		private var printColor1:TextField = new TextField();        private var format:TextFormat = new TextFormat();		private var format1:TextFormat = new TextFormat();		private var bandX:Number;		private var bandY:Number;		private var band_ScaleX:Number;		private var band_ScaleY:Number;		private var band1_ScaleY:Number;		private var textX:Number;		private var textY:Number;		private const textTrim:Number = 8;                public function ComponentResistor(bandCount:int, pngBandSuffix:String) {            			lead1 = new Lead_mc();			lead1.x = 0;			lead1.y = 0;			this.addChild(lead1);						lead2 = new Lead_mc();			lead2.x = 175;			lead2.y = 0;			lead2.scaleX = -1;			this.addChild(lead2);						lead1.setComponentObj(this);			lead1.setComponentName(this.name);						lead2.setComponentObj(this);			lead2.setComponentName(this.name);            m_bandCount = bandCount;            m_pngBandSuffix = pngBandSuffix;                        //testResistorTips();                        this.addEventListener(Event.ADDED_TO_STAGE, added_to_stage_handler);            this.addEventListener(Event.REMOVED_FROM_STAGE, removed_from_stage_handler);            this.addEventListener(Event.ENTER_FRAME, resistorLocationInitialValues)                    if (stage != null) {                stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);                stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);            }						setupBandZoom();						this.getChildByName('label_mc').visible=false;        }				public function setLabel(labelStr:String){			if(labelStr != ''){				trace('resistorLabel is: '+labelStr);				var label_mc:MovieClip = MovieClip(this.getChildByName('label_mc'));							var formatLabel:TextFormat = new TextFormat();				formatLabel.color = 0xFAEBEB;				formatLabel.size = 17;				formatLabel.bold = true;				formatLabel.font = "Arial";							label_mc.labelTextField = new TextField();				label_mc.labelTextField.defaultTextFormat = formatLabel;				label_mc.labelTextField.selectable = false;				label_mc.labelTextField.x = 7;				label_mc.labelTextField.y = 3;				label_mc.labelTextField.text = labelStr;				label_mc.labelTextField.width = label_mc.labelTextField.textWidth+5;				label_mc.labelTextField.height = label_mc.labelTextField.textHeight+2;				label_mc.addChild(label_mc.labelTextField);							this.addEventListener(MouseEvent.MOUSE_OVER, labelOn);				this.addEventListener(MouseEvent.MOUSE_OUT, labelOff);			}		}				private function labelOn(event:MouseEvent):void {			this.getChildByName('label_mc').visible=true;		}		private function labelOff(event:MouseEvent):void {			this.getChildByName('label_mc').visible=false;		}				public function resistorLeadChange(info:String):void {			trace('RESISTOR LEAD CHANGE '+info);		}				public function disconnect(lead:Lead):void {			var resistorLocation = lead1.getLocation() + "," + lead2.getLocation();			trace('disconnect location '+resistorLocation);            JavaScript.instance().sendEvent('disconnect', 'component', this.name, lead.getLocation());
            trace('lead.getLocation'+lead.getLocation());        }		public function connect(lead:Lead):void {			var resistorLocation = lead1.getLocation() + "," + lead2.getLocation();			trace('connect location '+resistorLocation);			JavaScript.instance().sendEvent('connect', 'component', this.name, lead.getLocation());		}        		public function getBandZoom():Boolean {			return bandZoom;		}				public function setBandZoom(bandZoom:Boolean):void {			this.bandZoom = bandZoom;		}		        public function getEnds():Array {            return [lead1, lead2];        }                private function mouseUpHandler(mevt:MouseEvent):void        {            onResistorMove_handler(mevt);        }                private function mouseMoveHandler(mevt:MouseEvent):void {        }                private function added_to_stage_handler(evt:Event):void        {            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);        }                private function removed_from_stage_handler(evt:Event):void        {            stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);        }                private function resistorLocationInitialValues(event:Event):void        {			//trace('ENTER ComponentResistor#ResistorLocationInitailValues');            resistorTipLeftX = this.x + (lead1.getLeadMovieClip().parent.x);            resistorTipLeftY = this.y + lead1.getLeadMovieClip().parent.y;            resistorTipRightX = this.x + (lead2.getLeadMovieClip().parent.x);            resistorTipRightY = this.y + lead2.getLeadMovieClip().parent.y;            resistorOnBoard();            //  replace 'color string' with the actual values of the resistors in ohms.            //componentName = ExternalInterface.call('breadModel', 'insert', 'resistor', resistorLeftLocation + ',' + resistorRightLocation, bandOneColor + ',' + bandTwoColor + ',' + bandThreeColor + ',' + bandFourColor);            removeEventListener(Event.ENTER_FRAME, resistorLocationInitialValues);        }				private function setupBandZoom():void {			this.getChildByName("band1").addEventListener(MouseEvent.MOUSE_OVER, zoomBand1);            this.getChildByName("band1").addEventListener(MouseEvent.MOUSE_OUT, unzoomBand1);            this.getChildByName("band2").addEventListener(MouseEvent.MOUSE_OVER, zoomBand2); 	 		this.getChildByName("band2").addEventListener(MouseEvent.MOUSE_OUT, unzoomBand2);            this.getChildByName("band3").addEventListener(MouseEvent.MOUSE_OVER, zoomBand3); 	 		this.getChildByName("band3").addEventListener(MouseEvent.MOUSE_OUT, unzoomBand3);            this.getChildByName("band4").addEventListener(MouseEvent.MOUSE_OVER, zoomBand4); 	 		this.getChildByName("band4").addEventListener(MouseEvent.MOUSE_OUT, unzoomBand4);			if(this.m_bandCount == 5) {				this.getChildByName("band5").addEventListener(MouseEvent.MOUSE_OVER, zoomBand5); 	 			this.getChildByName("band5").addEventListener(MouseEvent.MOUSE_OUT, unzoomBand5);			} 	 		 	 		format.font = "Verdana";        	format.color = 0x2F3309;        	format.size = 18;        	format.bold = true;			//format1 = format;			format1.font = "Verdana";        	format1.color = 0x2F3309;        	format1.bold = true;			format1.size = 6;        	        	printColor.defaultTextFormat = format; 			printColor.height = 40;			printColor.background = true;			printColor.backgroundColor = 0xE5DBC6;			printColor.selectable = false;			printColor1.defaultTextFormat = format1; 			printColor1.height = 40;			printColor1.background = true;			printColor1.backgroundColor = 0xE5DBC6;			printColor1.selectable = false;									textX = -15; //-5			textY = -35; //-25						bandX = -3;			bandY = -30;			band_ScaleX = 1.75;			band1_ScaleY = 3; //2.5			band_ScaleY = 3;		}				private function zoomBand1 (event:MouseEvent):void		{			trace('zoomBand1');			//sendEvent('ENTER zoomBand1');			var band = this.getChildByName("band1");			band.scaleX = band_ScaleX;			band.scaleY = band1_ScaleY;			band.x +=bandX;			band.y +=bandY;								printColor1.x = 0;			printColor1.y = (-13);  			printColor1.text = colors[0];			trace('color[0] '+colors[0]);			printColor1.width = printColor1.textWidth*2.2+2;			printColor1.height = printColor1.textHeight*1.4;			//printColor.height=40;			band.addChild(printColor1);		}				private function unzoomBand1 (event:MouseEvent):void		{			var band = this.getChildByName("band1");			band.scaleX = 1;			band.scaleY = 1;			band.x -=bandX;			band.y -=bandY;			band.removeChild(printColor1);		}				private function zoomBand2 (event:MouseEvent):void		{			trace('zoomBand2');			var band = this.getChildByName("band2");			band.scaleX = band_ScaleX;			band.scaleY = band_ScaleY;			band.x +=bandX;			band.y +=bandY;        				printColor.x = (band.x + textX);			printColor.y = (band.y + textY);			printColor.text = colors[1];			printColor.width = printColor.textWidth + textTrim;			printColor.height = printColor.textHeight + textTrim;						this.addChild(printColor);		}		private function unzoomBand2 (event:MouseEvent):void		{			var band = this.getChildByName("band2");			band.scaleX = 1;			band.scaleY = 1;			band.x -=bandX;			band.y -=bandY;			this.removeChild(printColor);		}   		private function zoomBand3 (event:MouseEvent):void		{			var band = this.getChildByName("band3");			band.scaleX = band_ScaleX;			band.scaleY = band_ScaleY;			band.x +=bandX;			band.y +=bandY;						printColor.x = (band.x + textX);			printColor.y = (band.y + textY);			printColor.text = colors[2];			printColor.width = printColor.textWidth + textTrim;			printColor.height = printColor.textHeight + textTrim;			this.addChild(printColor);		}		private function unzoomBand3 (event:MouseEvent):void		{			var band = this.getChildByName("band3");			band.scaleX = 1;			band.scaleY = 1;			band.x -=bandX;			band.y -=bandY;			this.removeChild(printColor);		}				private function zoomBand4 (event:MouseEvent):void		{			var band = this.getChildByName("band4");			band.scaleX = band_ScaleX;			band.scaleY = band_ScaleY;			band.x +=bandX;			band.y +=bandY;						printColor.x = (band.x + textX);			printColor.y = (band.y + textY);			printColor.text = colors[3];			printColor.width = printColor.textWidth + textTrim;			printColor.height = printColor.textHeight + textTrim;						this.addChild(printColor);		}		private function unzoomBand4 (event:MouseEvent):void		{			var band = this.getChildByName("band4");			band.scaleX = 1;			band.scaleY = 1;			band.x -=bandX;			band.y -=bandY;			this.removeChild(printColor);		}				private function zoomBand5 (event:MouseEvent):void		{			var band = this.getChildByName("band5");			band.scaleX = band_ScaleX;			band.scaleY = band_ScaleY;			band.x +=bandX;			band.y +=bandY;						printColor.x = (band.x + textX);			printColor.y = (band.y + textY);			printColor.text = colors[4];			printColor.width = printColor.textWidth + textTrim;			printColor.height = printColor.textHeight + textTrim;						this.addChild(printColor);		}		private function unzoomBand5 (event:MouseEvent):void		{			var band = this.getChildByName("band5");			band.scaleX = 1;			band.scaleY = 1;			band.x -=bandX;			band.y -=bandY;			this.removeChild(printColor);		}				                public function resistorOnBoard():void {            trace('ENTER ComponentResistor#resistorOnBoard');                        if (currentHoleOne !== null) {                currentHoleOne.gotoAndStop(1);                currentHoleOne = null;            }                        if (currentHoleTwo !== null ) {                currentHoleTwo.gotoAndStop(1);                currentHoleTwo = null;            }                        //for every row ...            if (parent.parent != null && MovieClip(parent.parent).rows != null) {            	//trace('for every row');                var boardRow:String;                var h:MovieClip;                            for (var rowNum:int = 1; rowNum <= 10; rowNum++) {                	//trace('rows '+rowNum);                    //start at left of grid                    //accessing the list of row by index                    var row:Array = MovieClip(parent.parent).rows[rowNum];                                         //for every hole in the row...                    for (var holeNum:int = 1; holeNum <= 30; holeNum++) {                    	//trace('holes '+holeNum);                        h = row[holeNum];                        //trace("h.x = " + h.x + " " + "h.y = " + h.y);                        boardRow = String.fromCharCode("a".charCodeAt(0) + rowNum - 1);                                                if (resistorTipLeftX > h.x &&  resistorTipLeftX < h.x + 12  &&  resistorTipLeftY > h.y &&  resistorTipLeftY < h.y + 12) {                            currentHoleOne = h;                            h.gotoAndStop(2);                            resistorLeftLocation = boardRow + holeNum;                            trace (this.name + " " + resistorLeftLocation + " Left On" );							lead1.setLocation(resistorLeftLocation); //jonah		                            //trace("resistorTipLeftY = " + resistorTipLeftY + " h.y = " + h.y);                            //trace(this.name + " Row = " + boardRow + " Column = " + holeNum + " Left Side On");                        }                        else if (  (resistorTipRightX > h.x) &&  (resistorTipRightX < h.x + 12)  &&  (resistorTipRightY > h.y) &&  (resistorTipRightY < h.y + 12) ) {                            currentHoleTwo = h;                            h.gotoAndStop(2);                            resistorRightLocation = boardRow+holeNum;                            trace (this.name + " " + resistorRightLocation + " Right On" );							lead2.setLocation(resistorRightLocation); //jonah                            //trace(this.name + " Row = " + boardRow + " Column = " + holeNum + " Left Side On");                        }                                            if (resistorLeftLocation != "empty") {                            //resistorLeftCoordinates = resistorLeftLocation;                        }                                                if (resistorRightLocation != "empty") {                            //resistorRightCoordinates = resistorRightLocation;                        }                    }                }            }        }                private function onResistorMove_handler(event:MouseEvent):void        {            var newResistorTipLeftX:Number = this.x + (lead1.getLeadMovieClip().x);            var newResistorTipLeftY:Number = this.y + lead1.getLeadMovieClip().y;            var newResistorTipRightX:Number = this.x + (lead2.getLeadMovieClip().x);            var newResistorTipRightY:Number = this.y +lead2.getLeadMovieClip().y;                          if ((newResistorTipLeftX != resistorTipLeftX) || (newResistorTipLeftY != resistorTipLeftY) )            {                resistorTipLeftX = newResistorTipLeftX;                resistorTipLeftY = newResistorTipLeftY;                resistorTipRightX = newResistorTipRightX;                resistorTipRightY = newResistorTipRightY;                this.resistorOnBoard();            }                        else if ((newResistorTipRightX != resistorTipRightX) || (newResistorTipRightY != resistorTipRightY) )            {                resistorTipLeftX = newResistorTipLeftX;                resistorTipLeftY = newResistorTipLeftY;                resistorTipRightX = newResistorTipRightX;                resistorTipRightY = newResistorTipRightY;                this.resistorOnBoard();            }        }        public function setColorBands(colors:Array) {            const toleranceBandName:String = (m_bandCount > 4) ? "band5" : "band4";						this.colors = colors;                        if (m_bandOneLoader != null)                Sprite(this.getChildByName("band1")).removeChild(m_bandOneLoader);            if (m_bandTwoLoader != null)                Sprite(this.getChildByName("band2")).removeChild(m_bandOneLoader);            if (m_bandThreeLoader != null)                Sprite(this.getChildByName("band3")).removeChild(m_bandOneLoader);            if (m_bandFourLoader != null)                Sprite(this.getChildByName("band4")).removeChild(m_bandOneLoader);            if (m_bandToleranceLoader != null)                Sprite(this.getChildByName(toleranceBandName)).removeChild(m_bandToleranceLoader);                    //load image into Band1            m_bandOneLoader = new Loader();             Sprite(this.getChildByName("band1")).addChild(m_bandOneLoader);             var bandOneBitmap:URLRequest = new URLRequest(m_pngBandSuffix + "/t_" + colors[0] + ".png");             m_bandOneLoader.load(bandOneBitmap);                         //load image into Band2            m_bandTwoLoader = new Loader();             Sprite(this.getChildByName("band2")).addChild(m_bandTwoLoader);             var bandTwoBitmap:URLRequest = new URLRequest(m_pngBandSuffix + "/s_" + colors[1] + ".png");             m_bandTwoLoader.load(bandTwoBitmap);                         //load image into Band3            m_bandThreeLoader = new Loader();             Sprite(this.getChildByName("band3")).addChild(m_bandThreeLoader);             var bandThreeBitmap:URLRequest = new URLRequest(m_pngBandSuffix + "/s_" + colors[2] + ".png");             m_bandThreeLoader.load(bandThreeBitmap);                        //load image into Band4            m_bandFourLoader = new Loader();             Sprite(this.getChildByName("band4")).addChild(m_bandFourLoader);             var bandFourBitmap:URLRequest = new URLRequest(m_pngBandSuffix + "/s_" + colors[3] + ".png");             m_bandFourLoader.load(bandFourBitmap);             //load image into Band5            if (colors.length > 4) {              m_bandToleranceLoader = new Loader();              Sprite(this.getChildByName(toleranceBandName)).addChild(m_bandToleranceLoader);              var bandToleranceBitmap:URLRequest = new URLRequest(m_pngBandSuffix + "/s_" + colors[4] + ".png");              m_bandToleranceLoader.load(bandToleranceBitmap);            }        }    //NOTES    //enter values because resistor is smaller on screen yet program looks at true values     //var hotspotWidth:Number = 12;    //var hotspotHeight:Number = 3.4;    //var resistorBodyWidth:Number = 43;    //resistor rollover left x = .8    //resistor rollover left y = 7.3    //resistor rollover right x =     //hard code rollover and resistorTip values based on resistor width of 67    //use resistor_sm.fla for guidance - set size to desired size of resistor    //use testResistorTips to tweak resistorTip x and y values                }}
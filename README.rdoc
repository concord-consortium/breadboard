= SPARKS
=== Copyright: Â©2010 Concord Consortium

== Building SPARKS and setting up local environment

=== Building Javascript code

Sparks uses Sprockets (http://getsprockets.org) to manage the javascript code.  Sprockets combines the individual JS files into a single file per activity. To avoid duplication, these files aren't managed by git.

To build the combined JS files:

 // Setup rvm to use Ruby 1.8.7 and a gemset named sparks
 rvm use 1.8.7
 rvm gemset create sparks
 echo "rvm use 1.8.7@sparks" > .rvmrc
 cd .

 // install bundler and the necessary gems
 gem install bundler
 bundle install --binstubs

 // build using sprockets, from top folder
 bin/rake

"rake" will need to be called each time a Javascript file is changed.

=== Setting up the server

SPARKS needs to be running from a server even when running locally, so it can access scripts correctly and so it can proxy other services such as the QUCS application (used for circuit solving).

The simplest way to do this is to modify the file proxy/apache.conf.sample with your information (modify the paths at the bottom of the file to point to the location of your local sparks directory), and then save the file as apache.conf (i.e. remove the .sample from the file name). You can then start a local Apache server by running

 apachectl -f "`pwd`/proxy/apache.conf" -k start

 // or simply
 ./start.sh

from your Sparks directory (though you first need to copy start.sample.sh to start.sh and modify the contents accordingly). Now you will be able to navigate to the html files in the project by pointing your browser to

 http://localhost:1234
 http://localhost:1234/activities.html
 http://localhost:1234/activities.html#series-a
 etc

==== Using a local version of QUCS

If you don't want to use the remote version of QUCS referenced in the Apache config file, you can install QUCS from http://qucs.sourceforge.net/, update the PHP file lib/qucsator/solve/index.php to point to your local install of QUCS if it is not in /usr/local/bin/, place the file somewhere where it can be served by PHP, such as ~/Sites/qucsator/solve, and modify the proxy file accordingly

=== Launch the application

Go to http://localhost:1234/ (or whatever port you set in the step above) in your browser to get open the main index file, or directly open any html file to go directly to an activity.


== Running the tests

This application is mostly tested using JSPEC. You can install JSPEC with

 gem install jspec

To run the tests on the command line with Rhino:

 // optinally run bin/rake to rebuild the files
 cd tests/jspec
 java -jar spec/support/js.jar -opt -1 spec/rhino-terminal.js

 // or just run
 cd tests/jspec
 ./test.sh

To run the tests in the browser, visit

 http://localhost:1234/tests/jspec/spec/dom.html

Note that some of the tests, 'Measuring breadboard components with QUCS' and 'Using multimeter with mock Flash connection' require a response from the QUCS applications. The rest should run fine as long as the code has been built (section 1 above).

== Understanding the code

The majority of the application can be found in app/javascript. The application is written in an MVC pattern, and the folders follow suit, except for the circuit components, whose model objects can all be found in /app/javascript/circuit.

There is legacy code in the /activities folder, which for the most part can be ignored.

== Deployment

This whole sparks folder needs to be deployed to the public folder of the sparks portal. This requires ssh'ing into the virtual server ruby-vm7.concord.org as the deploy user, finding the right folder, and git pulling. If you don't have permission to ssh as the deploy user, see someone.

==== Deploying to staging

// first push your changes to the 'master' branch

ssh deploy@ruby-vm7.concord.org
cd /web/staging/current/public/sparks-content/
git pull

==== Deploying to production

// first push your changes to the 'production' branch

ssh deploy@ruby-vm7.concord.org
cd /web/portal/current/public/sparks-content/
git pull

